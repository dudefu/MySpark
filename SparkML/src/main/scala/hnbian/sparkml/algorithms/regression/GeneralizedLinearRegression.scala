package hnbian.sparkml.algorithms.regression

import hnbian.spark.utils.SparkUtils
import org.apache.spark.ml.regression.GeneralizedLinearRegression
import utils.FileUtils

/**
  * @author hnbian 2019/1/17 15:17
  *         广义线性模型代码示例
  */
object GeneralizedLinearRegression extends App {
  val spark = SparkUtils.getSparkSession("GeneralizedLinearRegression", 4)
  val filePath = FileUtils.getFilePath("sample_linear_regression_data.txt")

  //加载数据
  val dataDF = spark.read.format("libsvm").load(filePath)
  //查看数据
  dataDF.show(false)
  /**
    * +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    * |label              |features                                                                                                                                                                                                                           |
    * +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    * |14.323146365332388 |(10,[0,1,2,3,4,5,6,7,8,9],[-0.2049276879687938,0.1470694373531216,-0.48366999792166787,0.643491115907358,0.3183669486383729,0.22821350958477082,-0.023605251086149304,-0.2770587742156372,0.47596326458377436,0.7107229819632654]) |
    * |-20.057482615789212|(10,[0,1,2,3,4,5,6,7,8,9],[-0.3205057828114841,0.51605972926996,0.45215640988181516,0.01712446974606241,0.5508198371849293,-0.2478254241316491,0.7256483175955235,0.39418662792516,-0.6797384914236382,0.6001217520150142])        |
    * |-3.2256352187273354|(10,[0,1,2,3,4,5,6,7,8,9],[0.35278245969741096,0.7022211035026023,0.5686638754605697,-0.4202155290448111,-0.26102723928249216,0.010688215941416779,-0.4311544807877927,0.9500151672991208,0.14380635780710693,-0.7549354840975826])|
    * |1.5299675726687754 |(10,[0,1,2,3,4,5,6,7,8,9],[-0.13079299081883855,0.0983382230287082,0.15347083875928424,0.45507300685816965,0.1921083467305864,0.6361110540492223,0.7675261182370992,-0.2543488202081907,0.2927051050236915,0.680182444769418])     |
    * |-0.250102447941961 |(10,[0,1,2,3,4,5,6,7,8,9],[-0.8062832278617296,0.8266289890474885,0.22684501241708888,0.1726291966578266,-0.6778773666126594,0.9993906921393696,0.1789490173139363,0.5584053824232391,0.03495894704368174,-0.8505720014852347])    |
    * +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    */
  val glr = new GeneralizedLinearRegression()
    .setFamily("gaussian") //模型中使用的误差分布类型
    .setLink("identity") //连接函数名，描述线性预测器和分布函数均值之间关系
    .setMaxIter(10)
    .setRegParam(0.3)
    .setFitIntercept(false)
  dataDF.persist()
  val model = glr.fit(dataDF)
  model.transform(dataDF).show()
  /**
    * +-------------------+--------------------+--------------------+
    * |              label|            features|          prediction|
    * +-------------------+--------------------+--------------------+
    * | -9.490009878824548|(10,[0,1,2,3,4,5,...|  1.4843492954223414|
    * | 0.2577820163584905|(10,[0,1,2,3,4,5,...| -0.6294499974835653|
    * | -4.438869807456516|(10,[0,1,2,3,4,5,...|  0.1576720300223913|
    * |-19.782762789614537|(10,[0,1,2,3,4,5,...|  0.6289046454051012|
    * | -7.966593841555266|(10,[0,1,2,3,4,5,...|   2.303825503787376|
    * +-------------------+--------------------+--------------------+
    */
  dataDF.unpersist()
  // 打印广义线性回归模型的系数
  println(s"Coefficients: ${model.coefficients}")
  /**
    * Coefficients: [0.010541828081257216,
    * 0.8003253100560949,
    * -0.7845165541420371,
    * 2.3679887171421914,
    * 0.5010002089857577,
    * 1.1222351159753026,
    * -0.2926824398623296,
    * -0.49837174323213035,
    * -0.6035797180675657,
    * 0.6725550067187461]
    */
  // 打印广义线性回归模型的截距
  println(s"Intercept: ${model.intercept}")
  //Intercept: 0.14592176145232041

  // 打印一些训练模型的指标
  val summary = model.summary
  //获取拟合模型的默认残差（偏差残差）
  summary.residuals().show(3)
  /**
    * +-------------------+
    * |  devianceResiduals|
    * +-------------------+
    * |-10.974359174246889|
    * | 0.8872320138420559|
    * | -4.596541837478908|
    * +-------------------+
    */

  /**
    * 估计系数和截距的标准误差。
    * 该值仅在使用“normal”求解器的基础`WeightedLeastSquares`时可用。
    * 如果`GeneralizedLinearRegression.fitIntercept`设置为true，则返回的最后一个元素对应于截距。
    */
  println(s"Coefficient Standard Errors: ${summary.coefficientStandardErrors.mkString(",")}")

  //fitIntercept => true
  /**
    * Coefficient Standard Errors:
    * 0.7950428434287478,
    * 0.8049713176546897,
    * 0.7975916824772489,
    * 0.8312649247659919,
    * 0.7945436200517938,
    * 0.8118992572197593,
    * 0.7919506385542777,
    * 0.7973378214726764,
    * 0.8300714999626418,
    * 0.7771333489686802,
    * 0.463930109648428
    */
  //fitIntercept => false
  /**
    * Coefficient Standard Errors:
    * 0.7941100255684304,
    * 0.8031247068718659,
    * 0.79662609636158,
    * 0.8261662019965853,
    * 0.7935816505866371,
    * 0.8106214100004155,
    * 0.7909712249109007,
    * 0.7961347545897113,
    * 0.82925509068747,
    * 0.7758421050548494
    */

  /**
    * 估计系数和截距的T统计量。
    * 此值仅在基础`WeightedLeastSquares`时可用
    * 使用“normal”求解器。
    *
    * 如果`GeneralizedLinearRegression.fitIntercept`设置为true，
    * 然后返回的最后一个元素对应于截距。
    */
  println(s"T Values: ${summary.tValues.mkString(",")}")
  /**
    * T Values:
    * 0.02032442997598987,
    * 1.0130249701589424,
    * -0.9772419958506912,
    * 2.8985180905449903,
    * 0.6237570818704646,
    * 1.3730429273930078,
    * -0.3621369326138608,
    * -0.6152022734204684,
    * -0.7313257944391011,
    * 0.8789835279996452
    */

  /**
    * 估计系数和截距的双边p值。
    * 此值仅在基础`WeightedLeastSquares`时可用
    * 使用“normal”求解器。
    *
    * 如果`GeneralizedLinearRegression.fitIntercept`设置为true，
    * 然后返回的最后一个元素对应于截距。
    */
  println(s"P Values: ${summary.pValues.mkString(",")}")
  /**
    * P Values:
    * 0.9837928240022737,
    * 0.3115471660567466,
    * 0.32893059312318096,
    * 0.003917052014281275,
    * 0.5330767956629119,
    * 0.17036571617850105,
    * 0.7174055133265125,
    * 0.5387061676966605,
    * 0.4649290456175268,
    * 0.37984016058182113
    */

  /**
    * 拟合模型的分散。
    * 对于 family 是 “binomial”和“poisson”，它被视为1.0，
    * 并且通过剩余的 Pearson 的Chi-Squared统计量（其被定义为Pearson残差的平方和）除以剩余自由度来估计。
    */
  println(s"Dispersion: ${summary.dispersion}")
  //Dispersion: 105.4150330254249

  //null 模型的偏差。
  println(s"Null Deviance: ${summary.nullDeviance}")
  //null Deviance: 53262.42735923456

  //null 模型的剩余自由度
  println(s"Residual Degree Of Freedom Null: ${summary.residualDegreeOfFreedomNull}")
  //Residual Degree Of Freedom Null: 501

  //打印训练模型的偏差
  println(s"Deviance: ${summary.deviance}")
  //Deviance: 51758.78121548363

  //剩余的自由度
  println(s"Residual Degree Of Freedom: ${summary.residualDegreeOfFreedom}")
  //Residual Degree Of Freedom: 491

  //拟合模型的Akaike信息准则（AIC）
  println(s"AIC: ${summary.aic}")
  //AIC: 3767.2857940376434
}
